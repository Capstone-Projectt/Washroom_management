{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vaibhav\\\\Downloads\\\\washroom\\\\frontend\\\\washrrom-management-app\\\\src\\\\components\\\\LabBoyDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Navbar from './Navbar';\nimport { Typography, List, ListItem, ListItemText, Card, CardContent, Box } from '@mui/material';\nimport JobDetails from './JobDetails';\nimport api from '../utils/api'; // Assuming this is an Axios instance or similar\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LabBoyDashboard = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [selectedJob, setSelectedJob] = useState(null);\n  useEffect(() => {\n    // Fetch assigned jobs from the server\n    const labboyId = sessionStorage.getItem('labboyid'); // Retrieve LabBoy ID from sessionStorage\n\n    if (labboyId) {\n      api.get(`/api/assigned_jobs?labboyId=${labboyId}`).then(response => {\n        setJobs(response.data);\n      }).catch(error => {\n        console.error('Error fetching jobs:', error);\n      });\n    } else {\n      console.error('LabBoy ID not found in sessionStorage');\n    }\n  }, []);\n  const handleJobClick = job => {\n    setSelectedJob(job);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Assigned Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(List, {\n            children: jobs.map(job => /*#__PURE__*/_jsxDEV(ListItem, {\n              button: true,\n              onClick: () => handleJobClick(job),\n              sx: {\n                '&:hover': {\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: `Job ID: ${job.id}`,\n                secondary: `Department: ${job.department}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this)\n            }, job.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), selectedJob && /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(JobDetails, {\n            job: selectedJob\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), \"//\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(LabBoyDashboard, \"FcuP12C099xEkGbxVAmWBiI5v74=\");\n_c = LabBoyDashboard;\nexport default LabBoyDashboard;\nvar _c;\n$RefreshReg$(_c, \"LabBoyDashboard\");","map":{"version":3,"names":["React","useEffect","useState","Navbar","Typography","List","ListItem","ListItemText","Card","CardContent","Box","JobDetails","api","jsxDEV","_jsxDEV","Fragment","_Fragment","LabBoyDashboard","_s","jobs","setJobs","selectedJob","setSelectedJob","labboyId","sessionStorage","getItem","get","then","response","data","catch","error","console","handleJobClick","job","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","p","variant","gutterBottom","mb","map","button","onClick","backgroundColor","primary","id","secondary","department","_c","$RefreshReg$"],"sources":["C:/Users/Vaibhav/Downloads/washroom/frontend/washrrom-management-app/src/components/LabBoyDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from './Navbar';\r\nimport {\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Card,\r\n  CardContent,\r\n  Box,\r\n} from '@mui/material';\r\nimport JobDetails from './JobDetails';\r\nimport api from '../utils/api'; // Assuming this is an Axios instance or similar\r\n\r\nconst LabBoyDashboard = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [selectedJob, setSelectedJob] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch assigned jobs from the server\r\n    const labboyId = sessionStorage.getItem('labboyid'); // Retrieve LabBoy ID from sessionStorage\r\n\r\n    if (labboyId) {\r\n      api.get(`/api/assigned_jobs?labboyId=${labboyId}`)\r\n        .then((response) => {\r\n          setJobs(response.data);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching jobs:', error);\r\n        });\r\n    } else {\r\n      console.error('LabBoy ID not found in sessionStorage');\r\n    }\r\n  }, []);\r\n\r\n  const handleJobClick = (job) => {\r\n    setSelectedJob(job);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Navbar />\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Assigned Jobs\r\n      </Typography>\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <List>\r\n            {jobs.map((job) => (\r\n              <ListItem\r\n                key={job.id}\r\n                button\r\n                onClick={() => handleJobClick(job)}\r\n                sx={{\r\n                  '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.04)' },\r\n                }}\r\n              >\r\n                <ListItemText\r\n                  primary={`Job ID: ${job.id}`}\r\n                  secondary={`Department: ${job.department}`}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </CardContent>\r\n      </Card>\r\n      {selectedJob && (\r\n        <Card>\r\n          <CardContent>\r\n            <JobDetails job={selectedJob} />//\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LabBoyDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}